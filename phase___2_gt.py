# -*- coding: utf-8 -*-
"""Phase _ 2 GT

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k9A9eNItOCo-sLxxWR-E9cQcdnvOiEkD
"""

import pandas as pd
import numpy as np
import re
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

d=pd.read_csv("/content/drive/MyDrive/dataset/emails.csv")
d
d.head(5)

d.shape

d.columns

def clean_text(text):
    text = re.sub(r"\S+@\S+", "", text)
    text = re.sub(r"http\S+", "", text)
    text = re.sub(r"[^a-zA-Z0-9\s]", "", text)
    text = re.sub(r"\s+", " ", text).strip()

    tokens = re.split(r"\s", text)

    tokens = [token.lower() for token in tokens]

    stop_words = set(['the', 'and', 'to', 'of', 'a', 'in', 'that', 'is', 'it', 'with', 'for'])
    filtered_tokens = [token for token in tokens if token not in stop_words]

    clean_text = ' '.join(filtered_tokens)


    return clean_text

d['clean_text'] = d['text'].apply(clean_text)
d

d['clean_text']

d['clean_text'] = d['clean_text'].str.replace('subject ', '')
d['clean_text']
d

X = d['clean_text']
y = d['spam']
X

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

X_train

X_test

feature_extraction = TfidfVectorizer(max_df=0.7, stop_words='english')
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)
y_train = y_train.astype('int')
y_test = y_test.astype('int')

y_test, y_train

print(X_test_features)

print(X_train_features)

model = LogisticRegression()

model.fit(X_train_features, y_train)

prediction_on_training_data = model.predict(X_train_features)

prediction_on_training_data

prediction_on_test_data = model.predict(X_test_features)

prediction_on_test_data

accuracy_on_training_data = accuracy_score(y_train, prediction_on_training_data)

accuracy_on_training_data

accuracy_on_test_data = accuracy_score(y_test, prediction_on_test_data)
accuracy_on_test_data